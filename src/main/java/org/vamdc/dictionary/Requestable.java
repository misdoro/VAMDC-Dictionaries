package org.vamdc.dictionary;

import java.util.HashMap;
import java.util.Map;

/*
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Do not edit this file, it is autogenerated by src/generate/dictionaryGenerator.sh

*/
/**
 * Selection keywords, as used in VSS2 and VAMDC-TAP capabilities
 */
public enum Requestable implements Keyword{
AtomStates( "Atomic states.", "Requesting information about atoms, including the states information.", "", "", ""),
  Atoms( "Atom information", "Requesting information about atoms, without their states.", "", "", ""),
  Collisions( "Collisional data", "collisional process data", "", "", ""),
  Functions( "", "", "", "", ""),
  Methods( "Method", "method information", "", "", ""),
  MoleculeBasisStates( "The basis states for a set of molecular states expressed as a linear combination on some basis", "The basis states for a set of molecular states expressed as a linear combination on some basis", "", "", ""),
  MoleculeQuantumNumbers( "request molecule information with states and QNs", "Request the full molecule information, including states and quantum numbers.", "", "", ""),
  MoleculeStates( "request molecular states", "request molecules, including their states but excluding the quantum numbers", "", "", ""),
  Molecules( "Request molecules.", "Request molecules, without information about their states.", "", "", ""),
  NonRadiativeTransitions( "Non-radiative transitions", "non-radiative transitions data", "", "", ""),
  Particles( "request particles", "request particle information only", "", "", ""),
  Processes( "Process data", "data for all available processes", "", "", ""),
  RadiativeCrossSections( "Absorption (or emission?) cross sections as a function of wavelength or frequency-equivalent", "Absorption (or emission?) cross sections as a function of wavelength or frequency-equivalent", "", "", ""),
  RadiativeTransitions( "Radiative transitions", "radiative transitions data", "", "", ""),
  Solids( "Request only information on solid..", "Restrict the search to databases containing information about solids.", "", "", ""),
  Sources( "References", "source reference information", "", "", ""),
  Species( "species information", "only brief species information, without states", "", "", ""),
  States( "States data", "complete states information", "", "", ""),

	;

	private final String desc;
	private final String longDesc;
	private final String units;
	private final DataType dataType;

	Requestable(String description, String longDescription,String units,String type, String constraint){
		this.desc=description;
		this.longDesc=longDescription;
		this.units=units;
		this.dataType=translateDataType(type);
	}

	public String getInfo(){
		return desc;
	}

	public String getDescription(){
		return longDesc;
	}

	public String getUnits(){
		return units;
	}
	
	public DataType getDataType(){
		return dataType;
	}
	
	private final static Map<String,Requestable> upcased = new HashMap<String,Requestable>(){
		private static final long serialVersionUID = 6000337537185037351L;
	{
		for (Requestable keyword:Requestable.values()){
			this.put(keyword.name().toUpperCase(), keyword);
		}
	}};
	
	public static Requestable valueOfIgnoreCase(String keyword) throws IllegalArgumentException{
		if (keyword==null) throw new IllegalArgumentException("Parameter can not be null");
		Requestable result = upcased.get(keyword.toUpperCase());
		if (result==null) throw new IllegalArgumentException("Keyword "+keyword+" is not found");
		return result;
	}
	
	private DataType translateDataType(String typeLabel){
		if ("f".equals(typeLabel))
			return DataType.Double;
		else if ("s".equals(typeLabel))
			return DataType.String;
		else if ("i".equals(typeLabel))
			return DataType.Integer;
		return DataType.String;
	}
}

